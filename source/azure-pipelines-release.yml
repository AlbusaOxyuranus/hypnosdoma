# PHP
# Test and package your PHP project.
# Add steps that run tests, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/php

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  phpVersion: 7.2

steps:
- script: |
    sudo update-alternatives --set php /usr/bin/php$(phpVersion)
    sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
    sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
    sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
    sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
    php -version
  displayName: 'Use PHP version $(phpVersion)'

# - script: |
#     sudo apt-get install automysqlbackup --force-yes
#   displayName: 'Install Automysqlbackup packages'

- script: |
    curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash -
    sudo apt-get install -y build-essential debconf-utils screen nodejs mysql-server google-chrome-stable
    sudo apt-get install -y unzip xvfb autogen autoconf libtool pkg-config nasm
    sudo mysql -uroot -proot -e "use mysql; update user set authentication_string=PASSWORD('poowf') where User='root'; update user set plugin='mysql_native_password';FLUSH PRIVILEGES;"
    sudo mysql -u root -ppoowf -e 'create database db_test;'
  displayName: 'Installing System Dependencies'

- script: |
    mysql --version
  displayName: 'MySQL Version'

- script: |
    sudo composer self-update
    composer install --no-interaction --prefer-dist --no-suggest
    composer --version
  displayName: 'Installing Package Dependencies'

- script: |
    cp deploy/.env.tests .env
  displayName: 'Environment Setup'

- script: |
    php artisan key:generate
    php artisan migrate
  displayName: 'Running Migrations'

- script: |
    sudo mysqldump -u root -ppoowf db_test > export.sql.gz
  displayName: "Create snapshot database"

- script: |
    sudo npm i -g npm
    sudo chown -R vsts:vsts ~/.npm
    sudo chown -R vsts:vsts ~/.config
    npm install
    npm run prod
    node -v
  displayName: 'Generating build assets'

- script: |
    screen -d -m google-chrome-stable --headless --disable-gpu --disable-dev-shm-usage --disable-software-rasterizer --remote-debugging-port=9222 http://localhost &
    screen -d -m php artisan serve &
  displayName: 'Starting Chrome and the Web Server'

- script: |
    # vendor/bin/phpunit --log-junit tests/Results/TEST-phpunit-junit.xml
  displayName: 'Running Unit Tests'

- script: |
   # php artisan dusk --log-junit tests/Results/TEST-dusk-junit.xml
  displayName: 'Running Browser Tests'

# Publish Test Results to Azure Pipelines/TFS
- task: PublishTestResults@2
  inputs:
    testRunner: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit
    testResultsFiles: '**/TEST-*.xml'
    searchFolder: '$(System.DefaultWorkingDirectory)/tests/Results' # Optional
    mergeTestResults: false # Optional
    #testRunTitle: # Optional
    #buildPlatform: # Optional
    #buildConfiguration: # Optional
    #publishRunAttachments: true # Optional
  condition: always()

- script: |
    cp deploy/.env.release .env
  displayName: 'Environment Setup for hypnosdoma.com'

- script: |
    cp deploy/index-files/root.htaccess .htaccess
    cp deploy/index-files/child.htaccess public/.htaccess
  displayName: 'Setup .htaccess files'

- script: |
    cp deploy/dev.robots.txt robots.txt
    cp deploy/dev.robots.txt public/robots.txt
  displayName: 'Setup robots.txt file'

- script: |
   php artisan config:cache
  displayName: "Clear cache Laravel"
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true
    verbose: true
    quiet: true

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: 'commands*.sh'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

